<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>單棲情緒</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunmaer.github.io/"/>
  <updated>2017-08-03T13:24:23.000Z</updated>
  <id>http://sunmaer.github.io/</id>
  
  <author>
    <name>sunmaer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识 node.js</title>
    <link href="http://sunmaer.github.io/2017/05/03/%E5%88%9D%E8%AF%86node.js/"/>
    <id>http://sunmaer.github.io/2017/05/03/初识node.js/</id>
    <published>2017-05-03T13:01:04.000Z</published>
    <updated>2017-08-03T13:24:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>分久必合，合久必分</p>
</blockquote>
<a id="more"></a>
<p>用了半天时间看完 Node.js 的基本API,感觉很轻便，没有Java那么笨重。很多语法在学习 Vue 的时候也见过，所以并没有什么陌生感，很快便熟悉了基本的用法。于是便参考别人的博客写了个学院官网的爬虫，程序能够获取文章内容和图片，然后存储在本地。不过当前版本过于简单，唯一的思想就是向服务器发送请求，获取文章的 html，使用 cheerio（类似Jquery)模块解析出 html 中的文字和图片。幸运的是，通过编写爬虫，折腾了一下 vim，熟悉了 vim 的配置和终端中一些常用的命令。代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">var http = require(<span class="string">'http'</span>)</div><div class="line">var fs = require(<span class="string">'fs'</span>)</div><div class="line">var cheerio = require(<span class="string">'cheerio'</span>)</div><div class="line">var request = require(<span class="string">'request'</span>)</div><div class="line"></div><div class="line">var i = 0</div><div class="line">// 初始化 URL</div><div class="line">var url = <span class="string">"http://coi.hzau.edu.cn/index.php/index-view-aid-1815.html"</span></div><div class="line"></div><div class="line"><span class="keyword">function</span> fetchPage(x) &#123; //封装函数</div><div class="line">	startRequest(x)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> startRequest(x) &#123;</div><div class="line">	// 采用 http 模块向服务器发起一次 get 请求</div><div class="line">	http.get(x, <span class="keyword">function</span>(res) &#123;</div><div class="line">		<span class="built_in">let</span> html = <span class="string">''</span> // 用来存储请求网页的整个 html 内容</div><div class="line">		<span class="built_in">let</span> titles = []</div><div class="line">		res.setEncoding(<span class="string">'utf-8'</span>) // 防止中文乱码</div><div class="line">		// 监听 data 事件，每次取一块数据</div><div class="line">		res.on(<span class="string">'data'</span>, <span class="keyword">function</span>(chunk) &#123;</div><div class="line">			html += chunk</div><div class="line">		&#125;)</div><div class="line">		// 监听 end 事件，如果整个网页内容的 html 都获取完毕，就执行回调函数</div><div class="line">		res.on(<span class="string">'end'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">			<span class="built_in">let</span> $ = cheerio.load(html) // 采用 cheerio 模块解析 html</div><div class="line">			<span class="built_in">let</span> time = $(<span class="string">'.info .fl'</span>).eq(0).text().trim().split(<span class="string">'：'</span>)[1]</div><div class="line">			<span class="built_in">let</span> news_item = &#123;</div><div class="line">				// 获取文章标题</div><div class="line">				title: $(<span class="string">'.art_title h4'</span>).text().trim(),</div><div class="line">				// 获取文章发布时间</div><div class="line">				time: time,</div><div class="line">				// 获取作者</div><div class="line">				author: $(<span class="string">'.info .fl'</span>).eq(1).text().trim().split(<span class="string">'：'</span>)[1],</div><div class="line">				// 获取文章的浏览次数</div><div class="line">				views: $(<span class="string">'.info .fl'</span>).eq(2).text().trim().split(<span class="string">'：'</span>)[1],</div><div class="line">				// 文章 URL</div><div class="line">				url: x,</div><div class="line">				// i 是用来判断获取了多少篇文章</div><div class="line">				i: i+1</div><div class="line">			&#125;</div><div class="line">			console.log(news_item) // 打印新闻信息</div><div class="line"></div><div class="line">			<span class="built_in">let</span> news_title = $(<span class="string">'.art_title h4'</span>).text().trim() </div><div class="line">			savedContent($, news_title) // 存储每篇新闻的标题和内容</div><div class="line">			savedImg($, news_title) // 存储每篇新闻的图片</div><div class="line"></div><div class="line">			// 下一篇文章的 URL</div><div class="line">			<span class="built_in">let</span> href = $(<span class="string">'.art_page p'</span>).eq(1).children(<span class="string">'a'</span>).attr(<span class="string">'href'</span>)</div><div class="line">			// 如果下一篇没有了，则结束</div><div class="line">			<span class="keyword">if</span>(href === <span class="string">'javascript:void(0)'</span>) &#123;</div><div class="line">				console.log(<span class="string">'文章抓取完毕，没有下一篇了'</span>)</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="built_in">let</span> nextLink = <span class="string">"http://coi.hzau.edu.cn"</span> + href</div><div class="line">				<span class="keyword">if</span>(i &lt;= 100) &#123;</div><div class="line">					fetchPage(nextLink)</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	&#125;).on(<span class="string">'error'</span>, <span class="keyword">function</span>(err) &#123;</div><div class="line">		console.log(err)</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 爬取新闻内容资源</div><div class="line"><span class="keyword">function</span> savedContent($, news_title) &#123;</div><div class="line">	$(<span class="string">'.art_content p'</span>).each(<span class="keyword">function</span>(index, item) &#123;</div><div class="line">		<span class="built_in">let</span> span = $(this).children(<span class="string">'span'</span>)</div><div class="line">		<span class="keyword">if</span>(span.length) &#123;</div><div class="line">			<span class="built_in">let</span> content = <span class="string">''</span></div><div class="line">			span.each(<span class="keyword">function</span>(index, item) &#123;</div><div class="line">				content += $(this).text()</div><div class="line">			&#125;)</div><div class="line">			content += <span class="string">'\n'</span></div><div class="line">			<span class="keyword">if</span>(content) &#123;</div><div class="line">				fs.appendFile(<span class="string">'./data/'</span> + news_title + <span class="string">'.txt'</span>, content, <span class="string">'utf-8'</span>, <span class="keyword">function</span>(err) &#123;</div><div class="line">					<span class="keyword">if</span>(err) &#123;</div><div class="line">						console.log(err)</div><div class="line">					&#125;</div><div class="line">				&#125;)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 获取图片资源</div><div class="line"><span class="keyword">function</span> savedImg($, news_title) &#123;</div><div class="line">	$(<span class="string">'.art_content p img'</span>).each(<span class="keyword">function</span>(index, item) &#123;</div><div class="line">		<span class="built_in">let</span> src = $(this).attr(<span class="string">'src'</span>)</div><div class="line">		<span class="built_in">let</span> arr = src.split(<span class="string">'/'</span>)</div><div class="line">		<span class="built_in">let</span> img_title = arr[arr.length - 1]</div><div class="line">		<span class="built_in">let</span> img_src = <span class="string">''</span></div><div class="line">		<span class="keyword">if</span>(src.indexOf(<span class="string">'http'</span>) === -1) &#123;</div><div class="line">			img_src = <span class="string">'http://coi.hzau.edu.cn'</span> + src</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			img_src = src</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		// 采用 request 模块，向服务器发起一次请求，获取图片资源</div><div class="line">		request.head(img_src, <span class="keyword">function</span>(err, res, body) &#123;</div><div class="line">			<span class="keyword">if</span>(err) &#123;</div><div class="line">				console.log(err)</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">		request(img_src).pipe(fs.createWriteStream(<span class="string">'./image/'</span> + news_title + <span class="string">'-'</span> + img_title))</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">fetchPage(url) // 主程序开始运行</div></pre></td></tr></table></figure>
<p>当然，这个项目我会继续下去，目标是完成一个小的应用，前端用 Vue,后端 Node.js，希望通过这个项目入门 Node.js,还有就是为音乐App做一些准备。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分久必合，合久必分&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="node.js" scheme="http://sunmaer.github.io/categories/node-js/"/>
    
    
      <category term="javascript" scheme="http://sunmaer.github.io/tags/javascript/"/>
    
      <category term="node.js" scheme="http://sunmaer.github.io/tags/node-js/"/>
    
      <category term="爬虫" scheme="http://sunmaer.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>IE hack</title>
    <link href="http://sunmaer.github.io/2017/04/21/IE-hack/"/>
    <id>http://sunmaer.github.io/2017/04/21/IE-hack/</id>
    <published>2017-04-21T14:22:23.000Z</published>
    <updated>2017-07-31T14:25:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>StatCounter是美国一家网站通讯流量监测机构，提供各种类型的统计报告以及网站流量统计服务。下面是StateCounter网站统计的国内这一年不同浏览器以及不同版本浏览器的使用情况：</p>
</blockquote>
<a id="more"></a>
<p><img src="http://otxtxlg3e.bkt.clouddn.com/blog/2.png" alt="IE hack"></p>
<p><img src="http://otxtxlg3e.bkt.clouddn.com/blog/1.png" alt="IE hack"></p>
<p>可见在国内，IE还是占有一定的市场，所以必须考虑浏览器兼容性问题，特别是低版本的IE浏览器。</p>
<p>首先我们来了解下CSS hack。CSS hack是因为现有浏览器对标准的解析不同，为了兼容各浏览器，所采用的一种补救方法。CSS hack是一种类似作弊的手段，以欺骗浏览器的方式达到兼容的目的，是用浏览器的兼容性差异来解决浏览器的兼容性问题。因此，在设计之初，写CSS hack需要遵循以下三条原则：</p>
<ul>
<li>有效： 能够通过 Web 标准的验证</li>
<li>只针对太古老的/不再开发的/已被抛弃的浏览器， 而不是目前的主流浏览器</li>
<li>代码要丑陋。让人记住这是一个不得已而为之的 Hack, 时刻记住要想办法去掉它。现在很多hacks已经抛弃了最初的原则，而滥用hack会导致浏览器更新之后产生更多的兼容性问题。因此，并不推荐使用CSS hack来解决兼容性问题。</li>
</ul>
<p>IE hack方式一：条件注释法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> !IE]&gt;&lt;!--&gt; 除IE外都可识别 &lt;!--&lt;![endif]--&gt;</div><div class="line">&lt;!--[<span class="keyword">if</span> IE]&gt; 所有的IE可识别 &lt;![endif]--&gt;</div><div class="line">&lt;!--[<span class="keyword">if</span> IE 6]&gt; 仅IE6可识别 &lt;![endif]--&gt;</div><div class="line">&lt;!--[<span class="keyword">if</span> lt IE 6]&gt; IE6以及IE6以下版本可识别 &lt;![endif]--&gt;</div><div class="line">&lt;!--[<span class="keyword">if</span> gte IE 6]&gt; IE6以及IE6以上版本可识别 &lt;![endif]--&gt;</div><div class="line">&lt;!--[<span class="keyword">if</span> IE 7]&gt; 仅IE7可识别 &lt;![endif]--&gt;</div><div class="line">&lt;!--[<span class="keyword">if</span> lt IE 7]&gt; IE7以及IE7以下版本可识别 &lt;![endif]--&gt;</div><div class="line">&lt;!--[<span class="keyword">if</span> gte IE 7]&gt; IE7以及IE7以上版本可识别 &lt;![endif]--&gt;</div><div class="line">&lt;!--[<span class="keyword">if</span> IE 8]&gt; 仅IE8可识别 &lt;![endif]--&gt;</div><div class="line">&lt;!--[<span class="keyword">if</span> IE 9]&gt; 仅IE9可识别 &lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p>IE hack方式二：类内属性前缀法</p>
<ul>
<li>“_″ 下划线是IE6专有的hack</li>
<li>“+” 加号IE6/7生效</li>
<li>“\9″ IE6/IE7/IE8/IE9/IE10都生效</li>
<li>“\0″ IE8/IE9/IE10都生效，是IE8/9/10的hack</li>
<li>“\9\0″ 只对IE9/IE10生效，是IE9/10的hack</li>
</ul>
<p>IE hack方式三：选择器前缀法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">*html *前缀只对IE6生效</div><div class="line">*+html *+前缀只对IE7生效</div><div class="line">@media screen\9&#123;...&#125;只对IE6/7生效</div><div class="line">@media \0screen &#123;body &#123; background: red; &#125;&#125;只对IE8有效</div><div class="line">@media \0screen\,screen\9&#123;body &#123; background: blue; &#125;&#125;只对IE6/7/8有效</div><div class="line">@media screen\0 &#123;body &#123; background: green; &#125;&#125; 只对IE8/9/10有效</div><div class="line">@media screen and (min-width:0\0) &#123;body &#123; background: gray; &#125;&#125; 只对IE9/10有效</div><div class="line">@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) &#123;body &#123; background: orange; &#125;&#125; 只对IE10有效</div></pre></td></tr></table></figure>
<blockquote>
<p>参考网站：<a href="http://browserhacks.com/" target="_blank" rel="external">http://browserhacks.com/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;StatCounter是美国一家网站通讯流量监测机构，提供各种类型的统计报告以及网站流量统计服务。下面是StateCounter网站统计的国内这一年不同浏览器以及不同版本浏览器的使用情况：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="css" scheme="http://sunmaer.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://sunmaer.github.io/tags/css/"/>
    
      <category term="IE hack" scheme="http://sunmaer.github.io/tags/IE-hack/"/>
    
  </entry>
  
  <entry>
    <title>toString和valueOf</title>
    <link href="http://sunmaer.github.io/2017/04/06/toString%E5%92%8CvalueOf/"/>
    <id>http://sunmaer.github.io/2017/04/06/toString和valueOf/</id>
    <published>2017-04-06T08:52:24.000Z</published>
    <updated>2017-08-06T10:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h1><p>JavaScript中所有的对象继承了两个转换方法。第一个是toString()，它的作用是返回一个反映这个对象的字符串。<br><a id="more"></a><br>很多类定义了更多特定版本的toString()方法。</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">行为描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Array</td>
<td style="text-align:center">将Array的每个元素转换为字符串，并将它们依次连接起来，两个元素之间用逗号作为分隔符进行拼接</td>
</tr>
<tr>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">如果布尔值是true，则返回”true”，否则返回”false”</td>
</tr>
<tr>
<td style="text-align:center">Date</td>
<td style="text-align:center">返回日期的文本表示</td>
</tr>
<tr>
<td style="text-align:center">Error</td>
<td style="text-align:center">返回一个包含相关错误信息的字符串</td>
</tr>
<tr>
<td style="text-align:center">Function</td>
<td style="text-align:center">返回这个函数的实现定义的表示方法</td>
</tr>
<tr>
<td style="text-align:center">Number</td>
<td style="text-align:center">返回数值的字符串表示</td>
</tr>
<tr>
<td style="text-align:center">String</td>
<td style="text-align:center">返回String对象的值</td>
</tr>
<tr>
<td style="text-align:center">Object(默认)</td>
<td style="text-align:center">返回”[object ObjectName]”</td>
</tr>
</tbody>
</table>
<h1 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h1><p>另一个转换方法是valueOf()。如果存在任意原始值，它就默认将对象转换为表示它的原始值。对象是复合值，而且大多数对象无法真正表示为一个原始值，因此默认的valueOf()方法简单地返回对象本身，而不是返回一个原始值。</p>
<blockquote>
<p>对于所有非日期对象来说，对象到原始值的转换基本上是对象到数字的转换（首先调用valueOf(),但日期对象则使用对象到字符串的转换模式，但这种转换只执行一次就立即使用，不会像上面所说的那般先转字符串再转成相应的数字类型。</p>
</blockquote>
<p>如果只重写了toString()方法，对象转换时会无视valueOf的存在来进行转换；如果只重写了valueOf方法，在要转换为字符串的时候会优先考虑valueOf方法。在不能调用toString的情况下，只能使用valueOf()方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;toString-NaN&quot;&gt;&lt;a href=&quot;#toString-NaN&quot; class=&quot;headerlink&quot; title=&quot;toString()&quot;&gt;&lt;/a&gt;toString()&lt;/h1&gt;&lt;p&gt;JavaScript中所有的对象继承了两个转换方法。第一个是toString()，它的作用是返回一个反映这个对象的字符串。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://sunmaer.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://sunmaer.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的line-height</title>
    <link href="http://sunmaer.github.io/2017/04/01/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84line-height/"/>
    <id>http://sunmaer.github.io/2017/04/01/你不知道的line-height/</id>
    <published>2017-04-01T12:14:23.000Z</published>
    <updated>2017-08-01T12:20:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是行间距？"><a href="#什么是行间距？" class="headerlink" title="什么是行间距？"></a>什么是行间距？</h3><p>行间距，即传说中控制两行文字之间垂直距离的东西。在CSS中，line-height被用来控制行与行之间的垂直间距。</p>
<a id="more"></a>
<h3 id="如何使用line-height？"><a href="#如何使用line-height？" class="headerlink" title="如何使用line-height？"></a>如何使用line-height？</h3><p>默认状态，浏览器使用1.0-1.2line-height，这是一个初始值。你可以定义CSS里的line-height属性来覆盖默认值。</p>
<p>5种方式定义line-height:</p>
<ul>
<li>1.line-height可以被定义为normal</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  line-height: normal; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有继承下来的元素不会忽略本身的font-size，而使用基于font-size算出来的line-height；浏览器在解释normal的时候会有细微的差别</p>
<ul>
<li>2.line-height可以被定义为继承</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  line-height: inherit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>3.line-height可以使用一个百分比值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  line-height: 120%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>line-height的百分比和当前元素的字体大小被用来计算值，这个计算出来的值会被层叠下去的元素所继承；所有继承下来的元素会忽略本身的font-size，而使用相同的，计算出来的line-height</p>
<ul>
<li>4.line-height可以被定义为一个长度的值（单位px em等）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  line-height: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>长度值会被后代元素继承；所有继承下来的元素会忽略本身的font-size，而使用相同的，继承的line-height</p>
<ul>
<li>5.line-height也可以被定义为纯数字（甚至没有单位）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  line-height: 1.2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有继承下来的元素使用基于font-size算出来的line-height</p>
<p>line-height值也可以在font属性里缩写<br>例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font: 100%/normal arial;</div></pre></td></tr></table></figure>
<p>为了深入了解line-height，我们需要先来了解CSS boxes的各种类型:</p>
<ul>
<li>Box类型1：containing boxes</li>
</ul>
<p>段落就是一种containing boxes,它包含了其他的boxes</p>
<ul>
<li>Box类型2：inline boxes</li>
</ul>
<p>inline boxes不会让内容显示成块形式，而是排成一行</p>
<ul>
<li>Box类型3：line boxes</li>
</ul>
<p>inline boxes一个接一个组成了line boxes</p>
<ul>
<li>Box类型4：content area</li>
</ul>
<p>content area是围绕着文字的看不见的一种box，它的高取决于font-size</p>
<p>inline boxes与line-height<br>行高应用在inline-boxes上</p>
<p>line box高度取决于它外部最高的inline box（或被替换元素）</p>
<p>line box在containing box宽度内靠着彼此的顶部堆积</p>
<blockquote>
<p>参考网站：<a href="https://www.slideshare.net/daemao/line-height-2470819" target="_blank" rel="external">https://www.slideshare.net/daemao/line-height-2470819</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是行间距？&quot;&gt;&lt;a href=&quot;#什么是行间距？&quot; class=&quot;headerlink&quot; title=&quot;什么是行间距？&quot;&gt;&lt;/a&gt;什么是行间距？&lt;/h3&gt;&lt;p&gt;行间距，即传说中控制两行文字之间垂直距离的东西。在CSS中，line-height被用来控制行与行之间的垂直间距。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://sunmaer.github.io/categories/css/"/>
    
    
      <category term="line-height" scheme="http://sunmaer.github.io/tags/line-height/"/>
    
  </entry>
  
  <entry>
    <title>起航</title>
    <link href="http://sunmaer.github.io/2017/03/30/%E8%B5%B7%E8%88%AA/"/>
    <id>http://sunmaer.github.io/2017/03/30/起航/</id>
    <published>2017-03-30T06:22:17.000Z</published>
    <updated>2017-07-31T14:22:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>当你的才华还撑不起你的野心时，那么你就应该静下心来学习。</p>
</blockquote>
<a id="more"></a>
<p>从今天起，定期更新博客，学习前端知识，记录人生感悟，分享所思所想。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当你的才华还撑不起你的野心时，那么你就应该静下心来学习。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="心情语录" scheme="http://sunmaer.github.io/categories/%E5%BF%83%E6%83%85%E8%AF%AD%E5%BD%95/"/>
    
    
      <category term="理想" scheme="http://sunmaer.github.io/tags/%E7%90%86%E6%83%B3/"/>
    
  </entry>
  
</feed>
